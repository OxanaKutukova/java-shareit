CREATE TABLE IF NOT EXISTS users
(
    user_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY(user_id),
    CONSTRAINT unique_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS requests
(
    request_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    description VARCHAR(4000) NOT NULL,
    requestor_id BIGINT,
    created timestamp WITHOUT TIME ZONE NOT NULL,
    CONSTRAINT pk_request PRIMARY KEY(request_id),
    CONSTRAINT fk_request_on_user FOREIGN KEY(requestor_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS items
(
    item_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    item_name VARCHAR(255) NOT NULL,
    description VARCHAR(4000) NOT NULL,
    is_available boolean NOT NULL,
    owner_id BIGINT,
    request_id BIGINT,
    CONSTRAINT pk_item PRIMARY KEY(item_id),
    CONSTRAINT fk_item_on_owner FOREIGN KEY(owner_id) REFERENCES users(user_id),
    CONSTRAINT fk_item_on_request FOREIGN KEY(request_id) REFERENCES requests(request_id),
    CONSTRAINT uk_owner_item_name UNIQUE (owner_id, item_name)
);

CREATE TABLE IF NOT EXISTS bookings
(
    booking_id BIGINT GENERATED ALWAYS AS IDENTITY NOT NULL,
    start_date timestamp WITHOUT TIME ZONE NOT NULL,
    end_date timestamp WITHOUT TIME ZONE NOT NULL,
    item_id BIGINT,
    booker_id BIGINT,
    status varchar(50) NOT NULL,
    CONSTRAINT pk_booking PRIMARY KEY(booking_id),
    CONSTRAINT fk_booking_on_item FOREIGN KEY(item_id) REFERENCES items(item_id),
    CONSTRAINT fk_booking_on_booker FOREIGN KEY(booker_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS comments
(
    comment_id BIGINT GENERATED ALWAYS AS IDENTITY NOT NULL,
    comment_text VARCHAR(4000) NOT NULL,
    item_id BIGINT,
    author_id BIGINT,
    insert_date timestamp WITHOUT TIME ZONE NOT NULL,
    CONSTRAINT pk_comment PRIMARY KEY(comment_id),
    CONSTRAINT fk_comment_on_item FOREIGN KEY(item_id) REFERENCES items(item_id),
    CONSTRAINT fk_comment_on_author FOREIGN KEY(author_id) REFERENCES users(user_id)
);